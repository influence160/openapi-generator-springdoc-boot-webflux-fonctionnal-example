/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package othmen.test.openapigenerator.springdoc.demo.app4.api;

import othmen.test.openapigenerator.springdoc.demo.app4.model.Employee;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-01T17:18:18.345104400+01:00[Europe/Paris]")
@Validated
@Tag(name = "employees", description = "the employees API")
public interface EmployeesApi {

    /**
     * GET /employees
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "findAllEmployees",
        tags = { "Employees" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Employee.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employees",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<Flux<Employee>>> findAllEmployees(
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * GET /employees/{id} : Find purchase order by ID
     *
     * @param id Employee Id (required)
     * @return successful operation (status code 200)
     *         or Invalid Employee ID supplied (status code 400)
     *         or Employee not found (status code 404)
     */
    @Operation(
        operationId = "findEmployeeById",
        summary = "Find purchase order by ID",
        tags = { "MyEmployee" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = Employee.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid Employee ID supplied"),
            @ApiResponse(responseCode = "404", description = "Employee not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employees/{id}",
        produces = { "*/*" }
    )
    Mono<ResponseEntity<Employee>> findEmployeeById(
        @Parameter(name = "id", description = "Employee Id", required = true) @PathVariable("id") String id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * POST /employees/update
     *
     * @param employee  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "updateEmployee",
        tags = { "Employees" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Employee.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/employees/update",
        produces = { "application/xml" }
    )
    Mono<ResponseEntity<Employee>> updateEmployee(
        @NotNull @Parameter(name = "employee", description = "", required = true) @Valid Employee employee,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );

}
