/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package othmen.test.openapigenerator.springdoc.demo.app4.api;

import othmen.test.openapigenerator.springdoc.demo.app4.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-01T17:18:18.345104400+01:00[Europe/Paris]")
@Validated
@Tag(name = "api", description = "the api API")
public interface ApiApi {

    /**
     * DELETE /api/user/delete/{id}
     *
     * @param id  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteUser",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/user/delete/{id}",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<String>> deleteUser(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * GET /api/user/index
     * get all the users
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllUsers",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/user/index",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<Flux<User>>> getAllUsers(
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * GET /api/user/{id}
     *
     * @param id The user Id (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getUserById",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/user/{id}",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<User>> getUserById(
        @Parameter(name = "id", description = "The user Id", required = true) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * PUT /api/user/put/{id}
     *
     * @param id  (required)
     * @param monoUser  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "putUser",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/user/put/{id}",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<User>> putUser(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id,
        @NotNull @Parameter(name = "monoUser", description = "", required = true) @Valid User monoUser,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );


    /**
     * POST /api/user/post
     *
     * @param monoUser  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "saveUser",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user/post"
    )
    Mono<ResponseEntity<Void>> saveUser(
        @NotNull @Parameter(name = "monoUser", description = "", required = true) @Valid User monoUser,
        @Parameter(hidden = true) final ServerWebExchange exchange
    );

}
