##generated using https://github.com/springdoc/springdoc-openapi-demos/tree/master/springdoc-openapi-spring-boot-2-webflux-functional
openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Users
- name: Employees
paths:
  /coffees:
    get:
      tags:
      - coffee-service
      operationId: getAllCoffees
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Coffee'
  /coffees/{id}:
    get:
      tags:
      - coffee-service
      operationId: getCoffeeById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Coffee'
  /coffees/{id}/orders:
    get:
      tags:
      - coffee-service
      operationId: getOrdersForCoffeeById
      parameters:
      - name: coffeeId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CoffeeOrder'
  /employees:
    get:
      tags:
      - Employees
      operationId: findAllEmployees
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
  /employees/{id}:
    get:
      tags:
      - MyEmployee
      summary: Find purchase order by ID
      operationId: findEmployeeById
      parameters:
      - name: id
        in: path
        description: Employee Id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee'
        "400":
          description: Invalid Employee ID supplied
        "404":
          description: Employee not found
  /employees/update:
    post:
      tags:
      - Employees
      operationId: updateEmployee
      parameters:
      - name: employee
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Employee'
      responses:
        "200":
          description: OK
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Employee'
  /api/user/delete/{id}:
    delete:
      tags:
      - Users
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/user/index:
    get:
      tags:
      - Users
      description: get all the users
      operationId: getAllUsers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/user/post:
    post:
      tags:
      - Users
      operationId: saveUser
      parameters:
      - name: monoUser
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/User'
      responses:
        "200":
          description: OK
  /api/user/put/{id}:
    put:
      tags:
      - Users
      operationId: putUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: monoUser
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/User'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/user/{id}:
    get:
      tags:
      - Users
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: The user Id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    Coffee:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    CoffeeOrder:
      type: object
      properties:
        coffeeId:
          type: string
        whenOrdered:
          type: string
          format: date-time
    Employee:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
        lastname:
          type: string
        age:
          type: integer
          format: int32
